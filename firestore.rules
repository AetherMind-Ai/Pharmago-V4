rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ─── Users ─────────────────────────────────────────────────────────────────
    // Authenticated users can create their user doc.
    // Authenticated users can read their own user doc.
    // Only the owner can update or delete their user doc.
    match /users/{userId} {
      allow create: if request.auth != null;
      // Allow authenticated users to read their own user doc.
      allow read: if request.auth != null && request.auth.uid == userId;
      // Allow public read for pharmacy user profiles.
      allow read: if resource.data.role == 'pharmacy';
      allow update, delete: if
        request.auth != null &&
        request.auth.uid == userId;

      // ─── Cart Items (Subcollection of Users) ────────────────────────────────
      match /cartItems/{cartItemId} {
        allow read, write: if
          request.auth != null &&
          request.auth.uid == userId;
      }

      // ─── OBP Subcollection (Subcollection of Users) ─────────────────────────
      match /OBP/{documentId} {
        allow create: if
          request.auth != null &&
          request.auth.uid == userId;
        // Add more permissions as needed:
        allow read, update, delete: if
          request.auth != null &&
          request.auth.uid == userId;
      }

      // ─── New Product Subcollection (Subcollection of Users) ─────────────────
      // Allows any authenticated user to read all products.
      // Only the owner can create or delete products in their own subcollection.
      match /newproduct/{documentId} {
        allow read: if true; // Allow public read access for new products
        allow create, update, delete: if // Added 'update' permission
          request.auth != null &&
          request.auth.uid == userId;
      }
    }

    // ─── Comments ──────────────────────────────────────────────────────────────
    // Signed-in users can create and read comments.
    // Only the comment owner can update or delete their comment.
    match /comments/{commentId} {
      allow read, create: if request.auth != null;
      allow update, delete: if
        request.auth != null &&
        resource.data.userId == request.auth.uid;
    }

    // ─── Products ──────────────────────────────────────────────────────────────
    // Allow authenticated users to read and create products.
    match /products/{productId} {
      allow read: if true; // Allow public read access for products
      allow create: if request.auth != null;
    }

    // ─── Feedbacks ─────────────────────────────────────────────────────────────
    // Authenticated users can create feedback.
    // All authenticated users can read feedback.
    // Authenticated users can update reactions on feedback.
    match /feedbacks/{feedbackId} {
      allow create: if request.auth != null;
      allow read: if true; // Allow public read
      allow update: if true; // TEMPORARY: Allow any user to update reactions for testing
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid; // Only the feedback owner can delete feedback

      // ─── Replies (Subcollection of Feedbacks) ───────────────────────────────
      match /replies/{replyId} {
        allow read: if true; // Allow public read for replies
        allow create: if request.auth != null;
        allow update: if true; // TEMPORARY: Allow any user to update replies for testing
        allow delete: if
          request.auth != null &&
          resource.data.userId == request.auth.uid; // Only the reply owner can delete
      }
    }

    // ─── Profile Views ─────────────────────────────────────────────────────────
    // Anyone (authenticated or anonymous) can create a profile view log.
    // Only authenticated users can read profile view logs (e.g., for pharmacy owner to see count).
    match /profileViews/{viewId} {
      allow create: if true;
      allow read: if true; // Allow public read access for profile views
      allow update: if request.auth != null; // Allow authenticated users to update profile views
      allow delete: if false; // Views cannot be deleted
    }

    // ─── Public Mock Products ──────────────────────────────────────────────────
    // Allow public read access to mockProducts for all users.
    match /mockProducts/{productId} {
      allow read: if true;
    }

    // ─── Pharmacies ────────────────────────────────────────────────────────────
    // Allow authenticated users to read pharmacy data.
    // Only the pharmacy owner can update their pharmacy data.
    match /pharmacies/{pharmacyId} {
      allow read: if true; // Allow public read access for pharmacy profiles
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == pharmacyId;
    }

    // ─── Pharmacy Verification (MTP) ───────────────────────────────────────────
    // Rules for the pharmacyVerification collection (now primarily for initial MTP generation)
    match /pharmacyVerification/{documentId} {
      // Allow creation only if authenticated and userId matches
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      // Allow read only if authenticated and userId matches
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      // Allow update only for 'used' status by the owner
      allow update: if request.auth != null && request.auth.uid == resource.data.userId && request.resource.data.keys().hasOnly(['used']);
      // No delete permission needed as MTPs are single-use or overwritten
      allow delete: if false;
    }

    // ─── Deny All Else ─────────────────────────────────────────────────────────
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    match /feedback_images/{pharmacyId}/{imageId} {
      allow write: if request.auth != null; // Allow any authenticated user to upload feedback images
      allow read: if true; // Anyone can read feedback images
    }
    match /pharmacy_cover_photos/{pharmacyId}/{imageId} {
      allow write: if request.auth != null && request.auth.uid == pharmacyId; // Only pharmacy owner can upload their cover photo
      allow read: if true; // Anyone can read pharmacy cover photos
    }
  }
}
